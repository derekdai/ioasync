!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/derekdai/test-coro/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
CORO	src/coro.c	/^#define CORO(/;"	d	file:
CORO_ENTRY	src/coro.h	/^#define CORO_ENTRY(/;"	d
CORO_PRIO_HIGHEST	src/coro.c	/^  CORO_PRIO_HIGHEST = -64,$/;"	e	enum:CoroPrioroty	file:
CORO_PRIO_LOWEST	src/coro.c	/^  CORO_PRIO_LOWEST = 63,$/;"	e	enum:CoroPrioroty	file:
CORO_PRIO_NORMAL	src/coro.c	/^  CORO_PRIO_NORMAL = 0,$/;"	e	enum:CoroPrioroty	file:
CORO_STATUS_DEAD	src/coro.h	/^  CORO_STATUS_DEAD,$/;"	e	enum:_CoroStatus
CORO_STATUS_INIT	src/coro.h	/^  CORO_STATUS_INIT = 0,$/;"	e	enum:_CoroStatus
CORO_STATUS_STARTED	src/coro.h	/^  CORO_STATUS_STARTED,$/;"	e	enum:_CoroStatus
Coro	src/coro.h	/^typedef struct _Coro Coro;$/;"	t	typeref:struct:_Coro
CoroEntry	src/coro.h	/^typedef void (*CoroEntry)();$/;"	t	typeref:typename:void (*)()
CoroPrioroty	src/coro.c	/^enum CoroPrioroty {$/;"	g	file:
CoroSche	src/coro.h	/^typedef struct _CoroSche CoroSche;$/;"	t	typeref:struct:_CoroSche
CoroStatus	src/coro.h	/^typedef enum _CoroStatus CoroStatus;$/;"	t	typeref:enum:_CoroStatus
Handler	src/test-coro.c	/^typedef struct _Handler Handler;$/;"	t	typeref:struct:_Handler	file:
Loop	src/test-coro.c	/^typedef struct _Loop Loop;$/;"	t	typeref:struct:_Loop	file:
STACK_SIZE	src/coro.c	/^#define STACK_SIZE /;"	d	file:
UCTX	src/coro.c	/^#define UCTX(/;"	d	file:
_CORO_H_	src/coro.h	/^#define _CORO_H_$/;"	d
_Coro	src/coro.c	/^struct _Coro {$/;"	s	file:
_CoroSche	src/coro.c	/^struct _CoroSche {$/;"	s	file:
_CoroStatus	src/coro.h	/^enum _CoroStatus {$/;"	g
_Handler	src/test-coro.c	/^struct _Handler {$/;"	s	file:
_LOGGING_H_	src/logging.h	/^#define _LOGGING_H_$/;"	d
_Loop	src/test-coro.c	/^struct _Loop {$/;"	s	file:
all	Makefile	/^all: test-coro$/;"	t
clean	Makefile	/^clean:$/;"	t
coro	src/test-coro.c	/^  Coro *coro;$/;"	m	struct:_Handler	typeref:typename:Coro *	file:
coro_add	src/coro.c	/^static void coro_add(Coro *coro) {$/;"	f	typeref:typename:void	file:
coro_find	src/coro.c	/^Coro *coro_find(const char *name) {$/;"	f	typeref:typename:Coro *
coro_free	src/coro.c	/^void coro_free(Coro *self) {$/;"	f	typeref:typename:void
coro_head	src/coro.c	/^static inline Coro *coro_head() {$/;"	f	typeref:typename:Coro *	file:
coro_init	src/coro.c	/^void coro_init() {$/;"	f	typeref:typename:void
coro_name	src/coro.c	/^inline const char *coro_name(Coro *coro) {$/;"	f	typeref:typename:const char *
coro_new	src/coro.c	/^Coro *coro_new(const char *name, CoroEntry entry, int data_size) {$/;"	f	typeref:typename:Coro *
coro_remove	src/coro.c	/^static void coro_remove(Coro *coro) {$/;"	f	typeref:typename:void	file:
coro_root	src/coro.c	/^static inline Coro *coro_root() {$/;"	f	typeref:typename:Coro *	file:
coro_sche	src/coro.c	/^void coro_sche() {$/;"	f	typeref:typename:void
coro_self	src/coro.c	/^inline Coro *coro_self() {$/;"	f	typeref:typename:Coro *
coro_set_default_stack_size	src/coro.c	/^void coro_set_default_stack_size(int stack_size) {$/;"	f	typeref:typename:void
coro_set_head	src/coro.c	/^static void coro_set_head(Coro *coro) {$/;"	f	typeref:typename:void	file:
coro_status	src/coro.c	/^inline CoroStatus coro_status(Coro *coro) {$/;"	f	typeref:typename:CoroStatus
coro_switch	src/coro.c	/^void coro_switch(Coro *target) {$/;"	f	typeref:typename:void
coro_switch_with_name	src/coro.c	/^int coro_switch_with_name(const char *name) {$/;"	f	typeref:typename:int
coro_tail	src/coro.c	/^static inline Coro *coro_tail() {$/;"	f	typeref:typename:Coro *	file:
coro_yield	src/coro.c	/^void coro_yield() {$/;"	f	typeref:typename:void
ctx	src/coro.c	/^  ucontext_t ctx;$/;"	m	struct:_Coro	typeref:typename:ucontext_t	file:
curr	src/coro.c	/^  Coro *curr;$/;"	m	struct:_CoroSche	typeref:typename:Coro *	file:
debug	src/logging.h	/^#define debug(/;"	d
error	src/logging.h	/^#define error(/;"	d
events	src/test-coro.c	/^  int events;$/;"	m	struct:_Handler	typeref:typename:int	file:
events	src/test-coro.c	/^  struct epoll_event events[0];$/;"	m	struct:_Loop	typeref:struct:epoll_event[0]	file:
fatal	src/logging.h	/^#define fatal(/;"	d
handler_free	src/test-coro.c	/^void handler_free(Handler *self) {$/;"	f	typeref:typename:void
handler_new	src/test-coro.c	/^Handler *handler_new(int events, Coro *coro) {$/;"	f	typeref:typename:Handler *
handlers	src/test-coro.c	/^  Handler *handlers[128];$/;"	m	struct:_Loop	typeref:typename:Handler * [128]	file:
info	src/logging.h	/^#define info(/;"	d
log	src/logging.h	/^#define log(/;"	d
loop	src/test-coro.c	/^thread_local Loop *loop = NULL;$/;"	v	typeref:typename:thread_local Loop *
loop_default	src/test-coro.c	/^Loop *loop_default() {$/;"	f	typeref:typename:Loop *
loop_deinit	src/test-coro.c	/^static void loop_deinit() {$/;"	f	typeref:typename:void	file:
loop_dispatch	src/test-coro.c	/^void loop_dispatch(Loop *self, struct epoll_event *event) {$/;"	f	typeref:typename:void
loop_free	src/test-coro.c	/^void loop_free(Loop * self) {$/;"	f	typeref:typename:void
loop_init	src/test-coro.c	/^void loop_init() {$/;"	f	typeref:typename:void
loop_new	src/test-coro.c	/^Loop *loop_new(int maxevents) {$/;"	f	typeref:typename:Loop *
loop_quit	src/test-coro.c	/^void loop_quit(Loop *self) {$/;"	f	typeref:typename:void
loop_register	src/test-coro.c	/^void loop_register(Loop *self, int fd, int events, Coro *coro) {$/;"	f	typeref:typename:void
loop_run	src/test-coro.c	/^void loop_run(Loop *self) {$/;"	f	typeref:typename:void
main	src/test-coro.c	/^int main() {$/;"	f	typeref:typename:int
maxevents	src/test-coro.c	/^  int maxevents;$/;"	m	struct:_Loop	typeref:typename:int	file:
name	src/coro.c	/^  char *name;$/;"	m	struct:_Coro	typeref:typename:char *	file:
next	src/coro.c	/^  Coro *next;$/;"	m	struct:_Coro	typeref:typename:Coro *	file:
next	src/test-coro.c	/^  Handler *next;$/;"	m	struct:_Handler	typeref:typename:Handler *	file:
num_coros	src/coro.c	/^  int num_coros;$/;"	m	struct:_CoroSche	typeref:typename:int	file:
num_fds	src/test-coro.c	/^  int num_fds;$/;"	m	struct:_Loop	typeref:typename:int	file:
on_stdin	src/test-coro.c	/^void on_stdin() {$/;"	f	typeref:typename:void
pollfd	src/test-coro.c	/^  int pollfd;$/;"	m	struct:_Loop	typeref:typename:int	file:
prev	src/coro.c	/^  Coro *prev;$/;"	m	struct:_Coro	typeref:typename:Coro *	file:
prev	src/test-coro.c	/^  Handler *prev;$/;"	m	struct:_Handler	typeref:typename:Handler *	file:
quit	src/test-coro.c	/^  bool quit;$/;"	m	struct:_Loop	typeref:typename:bool	file:
root	src/coro.c	/^  Coro *root;$/;"	m	struct:_CoroSche	typeref:typename:Coro *	file:
stack_size	src/coro.c	/^  int stack_size;$/;"	m	struct:_CoroSche	typeref:typename:int	file:
status	src/coro.c	/^  CoroStatus status;$/;"	m	struct:_Coro	typeref:typename:CoroStatus	file:
test-coro	Makefile	/^test-coro: src\/test-coro.c src\/coro.c$/;"	t
trace	src/logging.h	/^#define trace(/;"	d
warn	src/logging.h	/^#define warn(/;"	d
